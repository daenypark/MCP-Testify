# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "starboard/ubuntu-arm64-20.04.5"
  config.vm.box_version = "20221120.20.40.0"
  config.vm.box_download_insecure = true
  config.vm.provider "vmware_desktop" do |v|
      v.ssh_info_public = true
      v.gui = true
      v.linked_clone = false
      v.vmx["ethernet0.virtualdev"] = "vmxnet3"
      # Increase memory for Kubernetes and Docker containers
      v.vmx["memsize"] = "8192"
      v.vmx["numvcpus"] = "4"
  end

  # Port forwarding for wedding web app
  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
  # Optional: Direct access to services during development
  config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8081, host: 8081, host_ip: "127.0.0.1"
  
  # Argo CD UI
  config.vm.network "forwarded_port", guest: 30007, host: 30007, host_ip: "127.0.0.1"
  
  # Kubernetes API
  config.vm.network "forwarded_port", guest: 6443, host: 6443, host_ip: "127.0.0.1"

  # Ensure the current directory is properly synced
  config.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__auto: true, rsync__exclude: [".git/", "backend/logs/", "nginx/logs/"]

  # Provision the VM with Docker, Kubernetes (k3s), and Argo CD
  config.vm.provision "shell", inline: <<-SHELL
    # Update system
    apt-get update
    
    # Install Docker
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    
    # Install Docker Compose
    curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-aarch64" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # Add vagrant user to docker group
    usermod -aG docker vagrant
    
    # Install Java 17 for development
    apt-get install -y openjdk-17-jdk maven
    
    # Install utilities
    apt-get install -y curl wget git vim htop
    
    # Install kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/arm64/kubectl"
    chmod +x kubectl
    mv kubectl /usr/local/bin/
    
    # Install k3s (lightweight Kubernetes)
    curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--docker" sh -
    
    # Wait for k3s to be ready
    echo "Waiting for k3s to be ready..."
    timeout=60
    counter=0
    while ! kubectl get nodes >/dev/null 2>&1 && [ $counter -lt $timeout ]; do
        echo "Waiting for k3s API server... ($counter/$timeout)"
        sleep 2
        counter=$((counter + 2))
    done
    
    if [ $counter -eq $timeout ]; then
        echo "ERROR: k3s API server is not responding after $timeout seconds"
        systemctl status k3s
        exit 1
    fi
    
    echo "k3s is ready!"
    
    # Copy kubeconfig for vagrant user
    mkdir -p /home/vagrant/.kube
    cp /etc/rancher/k3s/k3s.yaml /home/vagrant/.kube/config
    chown -R vagrant:vagrant /home/vagrant/.kube
    
    # Fix kubeconfig server URL
    sed -i 's|server: https://127.0.0.1:6443|server: https://localhost:6443|g' /home/vagrant/.kube/config
    
    # Set KUBECONFIG environment variable
    echo 'export KUBECONFIG=/home/vagrant/.kube/config' >> /home/vagrant/.bashrc
    
    # Install Argo CD
    kubectl create namespace argocd
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    
    # Wait for Argo CD to be ready
    sleep 60
    
    # Get Argo CD admin password
    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > /home/vagrant/argocd-password.txt
    chown vagrant:vagrant /home/vagrant/argocd-password.txt
    
    # Install Argo CD CLI
    curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-arm64
    chmod +x /usr/local/bin/argocd
    
    # Create namespace for wedding app
    kubectl create namespace wedding-app
    
    echo "Kubernetes and Argo CD installed successfully!"
    echo "Argo CD UI: http://localhost:30007"
    echo "Username: admin"
    echo "Password: $(cat /home/vagrant/argocd-password.txt)"
    echo "Please run 'vagrant reload' to apply group changes"
  SHELL
end
