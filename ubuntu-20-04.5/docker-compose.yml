version: '3.8'

services:
  # Datadog Agent for APM and Host Metrics
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    env_file:
      - ../.env
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS=true
      - DD_TAGS=env:development,service:wedding-app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /sys/kernel/debug:/sys/kernel/debug
    ports:
      - "8225:8125/udp"  # DogStatsD (host:8225 -> container:8125)
      - "8226:8126/tcp"  # APM traces (host:8226 -> container:8126)
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: wedding-db
    environment:
      POSTGRES_DB: wedding_db
      POSTGRES_USER: wedding_user
      POSTGRES_PASSWORD: wedding_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%","port":"5432","username":"wedding_user","password":"wedding_pass","dbname":"wedding_db"}]'
      com.datadoghq.ad.check_names: '["postgres"]'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wedding-cache
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%","port":"6379"}]'
      com.datadoghq.ad.check_names: '["redisdb"]'

  # Java Spring Boot API with Datadog APM
  wedding-api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: wedding-api
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/wedding_db
      - SPRING_DATASOURCE_USERNAME=wedding_user
      - SPRING_DATASOURCE_PASSWORD=wedding_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - DD_AGENT_HOST=datadog-agent
      - DD_TRACE_AGENT_PORT=8126
      - DD_SERVICE=wedding-api
      - DD_ENV=development
      - DD_VERSION=1.0.0
      - DD_PROFILING_ENABLED=true
      - DD_LOGS_INJECTION=true
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/datadog/dd-java-agent.jar
    ports:
      - "8081:8080"
    depends_on:
      - postgres
      - redis
      - datadog-agent
    volumes:
      - ./backend/logs:/app/logs
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%","port":"8080"}]'
      com.datadoghq.ad.check_names: '["http_check"]'

  # Frontend (Simple React/HTML)
  wedding-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wedding-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8081
      - NODE_ENV=development
    depends_on:
      - wedding-api

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wedding-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - wedding-frontend
      - wedding-api
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url":"http://%%host%%:%%port%%/nginx_status"}]'
      com.datadoghq.ad.check_names: '["nginx"]'

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: wedding-network 